Namespace DLM.Compiler;

Helpers
    lower = ['a'..'z'];
    upper = ['A'..'Z'];
    digit = ['0'..'9'];
    all = [0 .. 0xFFFF];
    not_cr_lf = [all - [13 + 10]];
    short_comment = '//' not_cr_lf*;
    not_star = [all - '*'];
    not_star_slash = [not_star - '/'];
    long_comment = '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';

States
    normal, label, time;

Tokens
    directive = '#' not_cr_lf*;
    
    {time} time = digit+ ':' digit+;
    {time} interval_unit = 'd' | 'h' | 'm' | 's' | 'ms';
    
    bool = 'true'|'false';
    number = digit+;
    
    principall = 'principal';
    typedef = 'typedef';
    struct = 'struct';
    
    while = 'while';
    if = 'if';
    else = 'else';
    return = 'return';
    
    this = 'this';
    caller = 'caller';
    null = 'NULL';
    
    char = ''' ([not_cr_lf - '''] | '\' not_cr_lf)* ''';
    char_err = ''' ([not_cr_lf - '''] | '\' not_cr_lf)*;
    string = '"' ([not_cr_lf - '"'] | '\' not_cr_lf)* '"';
    string_err = '"' ([not_cr_lf - '"'] | '\' not_cr_lf)*;
    
    identifier = (lower | upper) (lower | upper | digit | '_')*;
    
    acts_for = '-->';
    if_acts_for = '-->?' | '?>';
    declassify_start = '<|';
    declassify_end = '|>';
    func_auth_start = '<<<';
    func_auth_end = '>>>';
    
    r_arrow = '->';
    l_arrow = '<-';
    
    compare = '==' | '>=' | '<=' | '>' | '<';
    
    assign = '=';
    
    underscore = '_';
    hat = '^';
    plus = '+';
    minus = '-';
    asterisk = '*';
    slash = '/';
    percent = '%';
    
    bang = '!';
    and = '&&';
    or = '||';
    
    period = '.';
    comma = ',';
    colon = ':';
    semicolon = ';';
    
    {normal -> label} label_start = '{{';
    {label -> time} time_start = '@';
    {time -> normal, label -> normal} label_end = '}}';
    
    {normal} time_call = '@';
    {normal} time_check = '@?';
    
    l_par = '(';
    r_par = ')';
    l_squ = '[';
    r_squ = ']';
    l_cur = '{';
    r_cur = '}';
    
    join = 0x2294;
    
    comment = short_comment | long_comment;
    whitespace = (' ' | 9 | 13 | 10)+;

Ignored Tokens
    whitespace, comment;

Token Syntax Highlight
    {comment} text: #498b3d, italic;
    {char, string, char_err, string_err} text:#d64c41;
    {if, else, while, return, typedef, struct} text: #247eaf, bold;
    {label_start, label_end, acts_for, if_acts_for, declassify_start, declassify_end,
     func_auth_start, func_auth_end, r_arrow, join, principall, this, caller,
     time_start, time, interval_unit, underscore, hat, time_call, time_check} text: #b111d9, bold;

Abstract Syntax Tree
    root = pre_processor* principal_declaration* principal_hierarchy_declaration* P.struct* statement*;
    
    pre_processor = directive;
    
    principal_declaration = principal+;
    
    principal_hierarchy_declaration = [principal]:principal [subordinates]:principal+;
    
    struct = identifier field* [name]:identifier;
    field
        = type identifier
        | {array} type identifier [size]:number
        ;
    
    statement
        = {declaration} type identifier expression?
        | {array_declaration} type identifier [size]:number
        | {assignment} identifier expression
        | {if_acts_for} claimant principal+ statement*
        | {if_acts_for_else} claimant principal+ [if_statements]:statement* [else_statements]:statement*
        | {if} if expression statement*
        | {if_else} if expression [if_statements]:statement* [else_statements]:statement*
        | {while} while expression statement*
        | {function_declaration} [readers]:principal* type identifier [parameters]:function_parameter* statement*
        | {expression} expression
        | {return} return expression?
        ;
    function_parameter
        = type identifier
        ;
    type
        = [name]:identifier label?
        | {pointer} type asterisk
        ;
    claimant
        = {this} this
        | {caller} caller
        ;
Productions
    root = pre_processor* principal_declaration* principal_hierarchy_declaration* P.struct* glstmt*;
    
    pre_processor = directive;
    
    principal_declaration = principall lprincipal semicolon -> New principal_declaration([lprincipal]);
    
    principal_hierarchy_declaration = principal acts_for lprincipal semicolon -> New principal_hierarchy_declaration(principal, [lprincipal]);
    
    struct = typedef T.struct identifier l_cur field* r_cur [name]:identifier semicolon -> New struct(identifier, [field], name);
    field
        = type identifier semicolon -> New field(type, identifier)
        | {a} type identifier l_squ number r_squ semicolon -> New field.array(type, identifier, number)
        ;
    
    glstmt -> statement
        = {decl} type identifier semicolon -> New statement.declaration(type, identifier, Null)
        | {declval} type identifier assign expr semicolon -> New statement.declaration(type, identifier, expr)
        | {arr} type identifier l_squ number r_squ semicolon -> New statement.array_declaration(type, identifier, number)
        | {func} readers? type identifier l_par fparams? r_par l_cur stmt* r_cur -> New statement.function_declaration([readers], type, identifier, [fparams], [stmt])
        ;
    readers -> principal+ = lprincipal l_arrow -> [lprincipal];
    fparams -> function_parameter*
        = type identifier -> [New function_parameter(type, identifier)]
        | {tail} [t1]:type [i1]:identifier comma fparams -> [New function_parameter(t1, i1), fparams]
        ;
    stmt -> statement
        = {one} if l_par expr r_par block -> New statement.if(if, expr, [block])
        | {two} if l_par expr r_par [b1]:block2 else [b2]:block2 -> New statement.if_else(if, expr, [b1], [b2])
        | {w} while l_par expr r_par block -> New statement.while(while, expr, [block])
        | {act} claimant if_acts_for lprincipal block -> New statement.if_acts_for(claimant, [lprincipal], [block])
        | {act2} claimant if_acts_for lprincipal [b1]:block2 else [b2]:block2 -> New statement.if_acts_for_else(claimant, [lprincipal], [b1], [b2])
        | otherstmt -> otherstmt
        ;
    stmt2 -> statement
        = {two} if l_par expr r_par [b1]:block2 else [b2]:block2 -> New statement.if_else(if, expr, [b1], [b2])
        | {w} while l_par expr r_par block2 -> New statement.while(while, expr, [block2])
        | {act2} claimant if_acts_for lprincipal [b1]:block2 else [b2]:block2 -> New statement.if_acts_for_else(claimant, [lprincipal], [b1], [b2])
        | otherstmt -> otherstmt
        ;
    otherstmt -> statement
        = {decl} type identifier semicolon -> New statement.declaration(type, identifier, Null)
        | {declval} type identifier assign expr semicolon -> New statement.declaration(type, identifier, expr)
        | {arr} type identifier l_squ number r_squ -> New statement.array_declaration(type, identifier, number)
        | {as} identifier assign expr semicolon -> New statement.assignment(identifier, expr)
        | {r} return expr? semicolon -> New statement.return(return, expr)
        | {expr} expressionstmt -> expressionstmt
        ;
    type
        = identifier label? -> New type(identifier, label)
        | {pointer} type asterisk
        ;
    block -> statement*
        = {one} stmt -> [stmt]
        | {many} l_cur stmt* r_cur -> [stmt]
        ;
    block2 -> statement*
        = {one} stmt2 -> [stmt2]
        | {many} l_cur stmt* r_cur -> [stmt]
        ;
    claimant
        = {this} this
        | {caller} caller
        ;

Abstract Syntax Tree
    label = policy+;
    
    time_policy = [period]:timing_period? [interval]:timing_interval* [count]:number?;
    timing_period = [from]:time [to]:time;
    timing_interval = number [unit]:interval_unit;
    
    policy
        = {variable} identifier
        | {principal} [owner]:principal [readers]:principal*
        | {lower} underscore
        | {upper} hat
        ;
    
    principal = identifier time_policy?;
Productions
    label = label_start lpolicy label_end -> New label([lpolicy]);
    
    time_policy
        = {p} [p]:timing_period -> New time_policy(p, [], Null)
        | {pc} [p]:timing_period asterisk [c]:number -> New time_policy(p, [], c)
        | {i} [i]:timing_interval+ -> New time_policy(Null, i, Null)
        | {ic} [i]:timing_interval+ asterisk [c]:number-> New time_policy(Null, i, c)
        | {pi} [p]:timing_period [i]:timing_interval+ -> New time_policy(p, i, Null)
        | {pic} [p]:timing_period [i]:timing_interval+ asterisk [c]:number -> New time_policy(p, i, c)
        ;
    timing_period = [f]:time minus [t]:time -> New timing_period(f, t);
    timing_interval = number [unit]:interval_unit;
    
    policy
        = {id} identifier -> New policy.variable(identifier)
        | principal r_arrow lprincipal -> New policy.principal(principal, [lprincipal])
        | {one} principal r_arrow -> New policy.principal(principal, [])
        | {l} underscore -> New policy.lower(underscore)
        | {u} hat -> New policy.upper(hat)
        ;
    lpolicy -> policy+
        = policy -> [policy]
        | {tail} policy semicolon lpolicy -> [policy, lpolicy]
        | {tail2} policy join lpolicy -> [policy, lpolicy]
        ;
    principal
        = {none} identifier -> New principal(identifier, Null)
        | {time} identifier time_start time_policy -> New principal(identifier, time_policy)
        ;
    lprincipal -> principal+
        = principal -> [principal]
        | {tail} principal comma lprincipal -> [principal, lprincipal]
        ;

Abstract Syntax Tree
    expression
        = {and} [left]:expression [right]:expression
        | {or} [left]:expression [right]:expression
        | {not} expression
        | {comparison} [left]:expression compare [right]:expression
        
        | {element} expression element
        | {index} expression [index]:expression
        
        | {plus} [left]:expression [right]:expression
        | {minus} [left]:expression [right]:expression
        | {multiply} [left]:expression [right]:expression
        | {divide} [left]:expression [right]:expression
        | {modulo} [left]:expression [right]:expression
        | {negate} expression
        
        | {function_call} time_call? [function]:identifier [authorities]:principal* [arguments]:expression*
        
        | {parenthesis} expression
        | {declassify} expression label?
        | {identifier} identifier
        | {time_check} time_check [function]:identifier
        | {number} number
        | {boolean} bool
        | {null} null
        | {char} char
        | {string} string
        ;
    element
        = identifier
        | {pointer} identifier
        ;

Productions
    expr -> expression
        = logicexpr -> logicexpr
        ;
    
    logicexpr -> expression
        = {and} logicterm and logicexpr -> New expression.and(logicterm, logicexpr)
        | {or} logicterm or logicexpr -> New expression.or(logicterm, logicexpr)
        | logicterm -> logicterm
        ;
    logicterm -> expression
        = {cmp} aritexpr compare logicterm -> New expression.comparison(aritexpr, compare, logicterm)
        | {not} bang aritexpr -> New expression.not(aritexpr)
        | aritexpr -> aritexpr
        ;
    
    aritexpr -> expression
        = {p} aritterm plus aritexpr -> New expression.plus(aritterm, aritexpr)
        | {m} aritterm minus aritexpr -> New expression.minus(aritterm, aritexpr)
        | {n} minus aritterm -> New expression.negate(aritterm)
        | aritterm -> aritterm
        ;
    aritterm -> expression
        = {m} aritfactor asterisk aritterm -> New expression.multiply(aritfactor, aritterm)
        | {d} aritfactor slash aritterm -> New expression.divide(aritfactor, aritterm)
        | {mod} aritfactor percent aritterm -> New expression.modulo(aritfactor, aritterm)
        | aritfactor -> aritfactor
        ;
    aritfactor -> expression
        = {e} aritfactor period identifier -> New expression.element(aritfactor, New element(identifier))
        | {p} aritfactor r_arrow identifier -> New expression.element(aritfactor, New element.pointer(identifier))
        | {i} aritfactor l_squ expr r_squ -> New expression.index(aritfactor, expr)
        | aritelem -> aritelem
        ;
    aritelem -> expression
        = {par} l_par expr r_par -> New expression.parenthesis(expr)
        | {func} funccall -> funccall
        | {n} number -> New expression.number(number)
        | {b} bool -> New expression.boolean(bool)
        | {null} null -> New expression.null(null)
        | {c} char -> New expression.char(char)
        | {str} string -> New expression.string(string)
        | {id} identifier -> New expression.identifier(identifier)
        | {check} time_check identifier -> New expression.time_check(time_check, identifier)
        | {dec} declassify_start expr declassify_end -> New expression.declassify(expr, Null)
        | {dec2} declassify_start expr comma label declassify_end -> New expression.declassify(expr, label)
        ;
    expressionstmt -> statement
        = {f} funccall semicolon -> New statement.expression(funccall)
        ;

    funccall -> expression
        = time_call? identifier funcauths? l_par funccallargs? r_par -> New expression.function_call(time_call, identifier, [funcauths], [funccallargs])
        ;
    funcauths -> principal+
        = func_auth_start lprincipal func_auth_end -> [lprincipal];
    funccallargs -> expression+
        = expr -> [expr]
        | {tail} expr comma funccallargs -> [expr, funccallargs]
        ;
